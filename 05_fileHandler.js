/**
 * Takes a generated data object, creates a prompt, calls the AI, 
 * and saves the resulting file to the specified subfolder.
 * @param {Object} docData The object of data generated by a ...Row function.
 * @param {GoogleAppsScript.Drive.Folder} subfolder The Google Drive folder to save the new file in.
 */
function processAndCreateFile(docData, subfolder) {
    if (!docData) {
        Logger.log("processAndCreateFile skipped because docData was null.");
        return;
    }

    // Destructure all needed properties from the data object
    const {
        agreementType, language, firstParty, counterparty,
        contractNumber, // The MSA's own number
        parentMsaContractNumber // The number from the parent MSA for SOWs/COs
    } = docData;

    // Generate a number if one isn't already set
    const finalContractNumber = contractNumber || generateContractNumber();
    docData.contractNumber = finalContractNumber; 

    Logger.log("docData going into prompt:\n" + JSON.stringify(docData, null, 2));

    const role = 'This GPT is designated to generate realistic sample agreements for use during AI demonstrations. It is tailored to create agreements with specific legal language and conditions that can be analyzed to return structured information.';
    const prompt = createPrompt(docData);

    try {
        const responseFromOpenAI = PreSalesOpenAI.executePrompt4o(role, prompt);

        // Pass the correctly determined number to the file creation function.
        const newFileId = createFileInDriveV3(responseFromOpenAI, agreementType, language, finalContractNumber);

        const newFile = DriveApp.getFileById(newFileId);
        newFile.moveTo(subfolder);
        newFile.setDescription(`Template for ${firstParty} and ${counterparty}`);

    } catch (error) {
        Logger.log(`Failed to create document for ${agreementType} with ${counterparty}. Original Error: ${error.message}`);
        // This includes the original error details in the message shown to the user.
        throw new Error(`Failed for ${agreementType}. Details: ${error.message}`);
    }
}
function createFileInDriveV3(html, agreementType, language, contractNumber) {
    const languageAbbreviations = {
        Spanish: "[ES]",
        French: "[FR]",
        German: "[DE]",
        "Portuguese (PT)": "[PT]",
        "Portuguese (BR)": "[BR]",
        Japanese: "[JA]",
    };

    const langPrefix = languageAbbreviations[language] || "";

    // Use the provided contract number, or generate a new one if it doesn't exist.
    const finalContractNumber = contractNumber || generateContractNumber(agreementType);

    // Clean filename: avoid leading spaces
    const fileNameParts = [];
    if (langPrefix) fileNameParts.push(langPrefix);
    fileNameParts.push(agreementType, finalContractNumber);
    const fileName = fileNameParts.join(" - ").trim();

    // Sanitize HTML content
    html = sanitizeHtml(html);

    // Create blob and file
    const blob = Utilities.newBlob(html, MimeType.HTML, `${fileName}.html`);
    const file = DriveApp.createFile(blob);

    // Convert to Google Doc
    const docFile = Drive.Files.copy(
        {
            title: fileName,
            mimeType: MimeType.GOOGLE_DOCS,
        },
        file.getId()
    );

    file.setTrashed(true);

    Logger.log("Google Docs File ID: " + docFile.id);
    return docFile.id;
}

// Proper sanitization function
function sanitizeHtml(html) {
    // Strip out any leftover code block tags
    html = html.replace(/```html|```/g, "").trim();

    // Escape your special markers once, globally, instead of brute-forcing 100 loops
    html = html.replace(/<# </g, "&lt;# &lt;").replace(/> #>/g, "&gt; #&gt;");

    return html;
}
